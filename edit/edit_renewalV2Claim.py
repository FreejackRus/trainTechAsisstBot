import logging
import re
from datetime import datetime as dt_datetime

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton

from handlers.renewalV2_handler import show_renewal_train_page, CALLBACK_RENEWAL_V2_TRAIN_SELECT
from states.renewal_states import ClaimRenewalV2
from utils.helpers import load_train_list
from utils.renewal_utils import show_renewal_summary_v2

logger = logging.getLogger(__name__)
router = Router()

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
LOCATIONS = {
    "renewalV2_loc_moscow": "–ú–æ—Å–∫–≤–∞",
    "renewalV2_loc_spb": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
    "renewalV2_loc_simferopol": "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å"
}
DEFAULT_TIMES = ["09:00", "10:00", "11:00", "12:00"]

ITEMS_PER_PAGE = 5
CALLBACK_RENEWAL_V2_PAGE_PREV = "renewalV2_page_prev"
CALLBACK_RENEWAL_V2_PAGE_NEXT = "renewalV2_page_next"
CALLBACK_RENEWAL_V2_SEARCH = "renewalV2_search_train"

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===
def get_edit_kb_v2():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data="edit_renewalV2_executor_name")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞", callback_data="edit_renewalV2_train_number")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–≥–æ–Ω–æ–≤", callback_data="edit_renewalV2_wagon_count")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ", callback_data="edit_renewalV2_location")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data="edit_renewalV2_date")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="edit_renewalV2_time")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="edit_renewalV2_document")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–µ", callback_data="renewalV2_back_to_summary")]
    ])


# === –ù–∞—á–∞–ª–æ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===
@router.callback_query(F.data == "renewalV2_edit_start")
async def edit_renewal_start(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v2] –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å. –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º editing.")
    await state.set_state(ClaimRenewalV2.editing)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=get_edit_kb_v2())
    await callback.answer()


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===
@router.callback_query(
    F.data.in_([
        "edit_renewalV2_executor_name",
        "edit_renewalV2_train_number",
        "edit_renewalV2_wagon_count",
        "edit_renewalV2_location",
        "edit_renewalV2_date",
        "edit_renewalV2_time",
        "edit_renewalV2_document"
    ]),
    ClaimRenewalV2.editing
)
async def start_editing_field(callback: CallbackQuery, state: FSMContext):
    field_map = {
        "edit_renewalV2_executor_name": ("executor_name", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:"),
        "edit_renewalV2_train_number": ("train_number", "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞:"),
        "edit_renewalV2_wagon_count": ("wagon_count", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–≥–æ–Ω–æ–≤:"),
        "edit_renewalV2_location": ("location", "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç:"),
        "edit_renewalV2_date": ("date", "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ –≤ –¥–µ–ø–æ:"),
        "edit_renewalV2_time": ("time", "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:"),
        "edit_renewalV2_document": ("document", "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç:")
    }

    field_key = callback.data
    field_info = field_map.get(field_key)

    if not field_info:
        await callback.message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    field_name, prompt = field_info
    await state.update_data(editing_field=field_name)

    # === –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è ‚Äî —Å–≤–æ–π –ø–µ—Ä–µ—Ö–æ–¥ ===
    data = await state.get_data()
    if field_name == "train_number":
        trains = data.get("trains", []) or load_train_list()
        page = data.get("page", 0)
        await state.update_data(trains=trains, page=page)
        await show_renewal_train_page(callback.message, state, page=page)
    elif field_name == "location":
        locations_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=loc, callback_data=key)] for key, loc in LOCATIONS.items()
        ])
        await callback.message.answer(prompt, reply_markup=locations_kb)
    elif field_name == "date":
        await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:")
        await state.set_state(ClaimRenewalV2.date)
        await state.update_data(editing_field="date")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        await callback.answer()
    elif field_name == "time":
        time_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=time, callback_data=f"renewalV2_time_{time}")]
            for time in DEFAULT_TIMES
        ] + [[InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data="renewalV2_time_custom")]])
        await callback.message.answer(prompt, reply_markup=time_kb)
    elif field_name == "document":
        doc_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_document")]
        ])
        await state.set_state(ClaimRenewalV2.document)
        await callback.message.answer(prompt, reply_markup=doc_kb)
    else:
        await callback.message.answer(prompt)

    await callback.answer()


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª–µ–π ===
@router.message(ClaimRenewalV2.editing)
async def handle_edited_field(message: Message, state: FSMContext):
    logger.info(f"[v2] –ü–æ–ª—É—á–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {message.text}")
    data = await state.get_data()
    field_to_edit = data.get("editing_field")

    if not field_to_edit:
        await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ, –∫–∞–∫–æ–µ –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.")
        return

    value = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if field_to_edit == "wagon_count" and (not value.isdigit() or int(value) <= 0):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–≥–æ–Ω–æ–≤.")
        return
    elif field_to_edit == "time" and not re.match(r"^([01]\d|2[0-3]):[0-5]\d$", value):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—á:–º–º")
        return
    elif field_to_edit == "date" and not re.match(r"\d{2}\.\d{2}\.\d{4}", value):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    update_dict = {field_to_edit: value}
    await state.update_data(update_dict)
    await message.answer(f"‚úÖ –ü–æ–ª–µ '{field_to_edit}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

    # –û—á–∏—Å—Ç–∫–∞ —Ñ–ª–∞–≥–∞ –∏ –ø–æ–∫–∞–∑ —Å–≤–æ–¥–∫–∏
    await state.update_data(editing_field=None)
    await show_renewal_summary_v2(message, state)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–µ–∑–¥–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ===
@router.callback_query(F.data == "edit_renewalV2_train_number", ClaimRenewalV2.editing)
async def edit_train_number(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v2] –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–∞ | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    data = await state.get_data()
    page = data.get("page", 0)
    await state.update_data(editing_field="train_number")
    await show_renewal_train_page(callback.message, state, page=page)
    await callback.answer()


@router.callback_query(F.data.startswith(CALLBACK_RENEWAL_V2_TRAIN_SELECT), ClaimRenewalV2.editing)
async def select_edited_train(callback: CallbackQuery, state: FSMContext):
    train_id = callback.data.replace(CALLBACK_RENEWAL_V2_TRAIN_SELECT, "", 1)
    await state.update_data(train_number=train_id)
    await callback.message.answer(f"‚úÖ –ü–æ–µ–∑–¥ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {train_id}")
    await show_renewal_summary_v2(callback.message, state)
    await state.update_data(editing_field=None)
    await callback.answer()


@router.callback_query(F.data == CALLBACK_RENEWAL_V2_PAGE_PREV, ClaimRenewalV2.editing)
async def navigate_renewal_pages_prev(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    page = max(data.get("page", 0) - 1, 0)
    await state.update_data(page=page)
    await show_renewal_train_page(callback.message, state, page=page)
    await callback.answer()


@router.callback_query(F.data == CALLBACK_RENEWAL_V2_PAGE_NEXT, ClaimRenewalV2.editing)
async def navigate_renewal_pages_next(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    page = data.get("page", 0) + 1
    await state.update_data(page=page)
    await show_renewal_train_page(callback.message, state, page=page)
    await callback.answer()


@router.callback_query(F.data == CALLBACK_RENEWAL_V2_SEARCH, ClaimRenewalV2.editing)
async def open_renewal_search_train(callback: CallbackQuery, state: FSMContext):
    logger.info("[v2] –ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
    await state.set_state(ClaimRenewalV2.train_search)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await callback.answer()


@router.message(ClaimRenewalV2.train_search, ClaimRenewalV2.editing)
async def search_edited_train(message: Message, state: FSMContext):
    query = message.text.strip().upper()
    data = await state.get_data()
    all_trains = data.get("trains", []) or load_train_list()
    results = [t for t in all_trains if t.upper().startswith(query)]

    if not results:
        await message.answer("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ–µ–∑–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üöÜ –ü–æ–µ–∑–¥ ‚Ññ{train}", callback_data=f"{CALLBACK_RENEWAL_V2_TRAIN_SELECT}{train}")]
        for train in results[:10]
    ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:", reply_markup=kb)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ—Å—Ç ===
@router.callback_query(F.data.startswith("renewalV2_loc_"), ClaimRenewalV2.editing)
async def handle_location_change(callback: CallbackQuery, state: FSMContext):
    location = LOCATIONS.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ")
    await state.update_data(location=location)
    await callback.message.answer(f"‚úÖ –ú–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {location}")
    await show_renewal_summary_v2(callback.message, state)
    await callback.answer()


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ ===
@router.callback_query(F.data.startswith("renewalV2_time_"), ClaimRenewalV2.editing)
async def handle_time_change(callback: CallbackQuery, state: FSMContext):
    time = callback.data.replace("renewalV2_time_", "", 1)
    data = await state.get_data()
    new_datetime = f"{data['date']} {time}"
    await state.update_data(datetime=new_datetime, time=time)
    await callback.message.answer(f"‚úÖ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {time}")
    await show_renewal_summary_v2(callback.message, state)
    await callback.answer()


@router.message(ClaimRenewalV2.custom_time, ClaimRenewalV2.editing)
async def save_custom_time(message: Message, state: FSMContext):
    time = message.text.strip()
    if not re.match(r"^(?:[01]\d|2[0-3]):(?:[0-5]\d)$", time):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30 –∏–ª–∏ 14:45).")
        return

    data = await state.get_data()
    new_datetime = f"{data['date']} {time}"
    await state.update_data(datetime=new_datetime, time=time)
    await message.answer(f"‚úÖ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {time}")
    await show_renewal_summary_v2(message, state)


@router.message(ClaimRenewalV2.date)
async def process_edit_date_input(message: Message, state: FSMContext):
    date_str = message.text.strip()

    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_obj = dt_datetime.strptime(date_str, "%d.%m.%Y").date()
        formatted_date = date_obj.strftime("%d.%m.%Y")

        data = await state.get_data()
        new_datetime = f"{formatted_date} {data.get('time', '09:00')}"

        await state.update_data(date=formatted_date, datetime=new_datetime)
        await message.answer(f"‚úÖ –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {formatted_date}")
        await show_renewal_summary_v2(message, state)
        await state.update_data(editing_field=None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:")


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ===
@router.message(ClaimRenewalV2.document, ClaimRenewalV2.editing)
async def renewal_get_new_document(message: Message, state: FSMContext):
    logger.info(f"[v2] –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    if message.photo:
        file_id = message.photo[-1].file_id
        file_name = f"{file_id}.jpg"
    elif message.document:
        file_id = message.document.file_id
        file_name = message.document.file_name
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª.")
        return

    await state.update_data(document={"file_id": file_id, "file_name": file_name})
    await message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω—ë–Ω.")
    await show_renewal_summary_v2(message, state)


@router.callback_query(F.data == "skip_document", ClaimRenewalV2.editing)
async def skip_new_document(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v2] –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    await state.update_data(document=None)
    await callback.message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω.")
    await show_renewal_summary_v2(callback.message, state)
    await callback.answer()


# === –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–≤–æ–¥–∫–µ ===
@router.callback_query(F.data == "renewalV2_back_to_summary", ClaimRenewalV2.editing)
async def back_to_summary(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v2] –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–≤–æ–¥–∫–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
    await show_renewal_summary_v2(callback.message, state)
    await callback.answer()