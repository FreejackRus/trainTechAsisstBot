import logging
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

import config
from glpi_api import connect
from keyboards.inline_kb import get_checkbox_kb_with_other
from keyboards.reply_kb import get_cancel_kb, get_main_menu_kb
from states.renewal_states import ClaimRenewal

router = Router()

# === –¢–∏–ø—ã —Ä–∞–±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–æ—Å–Ω–∞—â–µ–Ω–∏—è ===
WORK_TYPES_RENEWAL = [
    "–í—ã–µ–∑–¥ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ –¥–µ–ø–æ",
    "–î–µ–º–æ–Ω—Ç–∞–∂",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–±–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞—Å—Å",
    "–ú–æ–Ω—Ç–∞–∂",
    "–ü—É—Å–∫–æ-–Ω–∞–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ò–†–°",
    "–ü—Ä–æ—á–µ–µ"
]

# === –ù–∞—á–∞–ª–æ: –ü–µ—Ä–µ–æ—Å–Ω–∞—â–µ–Ω–∏–µ ===
@router.message(F.text == "–ü–µ—Ä–µ–æ—Å–Ω–∞—â–µ–Ω–∏–µ")
async def start_renewal(message: Message, state: FSMContext):
    await state.set_state(ClaimRenewal.train_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞:", reply_markup=get_cancel_kb())

# === –®–∞–≥ 1: –ù–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞ ‚Üí Wagon number ===
@router.message(ClaimRenewal.train_number)
async def renewal_wagon_number(message: Message, state: FSMContext):
    if message.text.strip().isdigit():
        await state.update_data(train_number=message.text)
        await state.set_state(ClaimRenewal.wagon_number)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞:", reply_markup=get_cancel_kb())
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞ (—á–∏—Å–ª–æ):")

# === –®–∞–≥ 2: –ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞ ‚Üí Wagon SN ===
@router.message(ClaimRenewal.wagon_number)
async def renewal_wagon_sn(message: Message, state: FSMContext):
    if message.text.strip().isdigit():
        await state.update_data(wagon_number=message.text)
        await state.set_state(ClaimRenewal.wagon_sn)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞:", reply_markup=get_cancel_kb())
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞ (—á–∏—Å–ª–æ):")

# === –®–∞–≥ 3: –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞ ‚Üí Equipment IN ===
@router.message(ClaimRenewal.wagon_sn)
async def renewal_equipment_in(message: Message, state: FSMContext):
    await state.update_data(wagon_sn=message.text)
    await state.set_state(ClaimRenewal.equipment_in)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:", reply_markup=get_cancel_kb())

# === –®–∞–≥ 4: –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç ===
@router.message(ClaimRenewal.equipment_in)
async def renewal_work_type(message: Message, state: FSMContext):
    await state.update_data(equipment_in=message.text)
    await state.set_state(ClaimRenewal.work_types)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —Ä–∞–±–æ—Ç:",
                         reply_markup=get_checkbox_kb_with_other(WORK_TYPES_RENEWAL, prefix="renewal"))

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç ===
@router.callback_query(F.data.startswith("renewal_check_"))
async def handle_work_check(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.split("_")[2])
    data = await state.get_data()
    selected = data.get("selected_works", [])

    if index in selected:
        selected.remove(index)
    else:
        selected.append(index)

    await state.update_data(selected_works=selected)
    await callback.message.edit_reply_markup(
        reply_markup=get_checkbox_kb_with_other(WORK_TYPES_RENEWAL, selected, prefix="renewal")
    )

# === –ì–æ—Ç–æ–≤–æ ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã ===
@router.callback_query(F.data == "renewal_done")
async def finish_selecting_works(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_indices = data.get("selected_works", [])
    selected_texts = [WORK_TYPES_RENEWAL[i] for i in selected_indices]

    if not selected_texts and not data.get("manual_work"):
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Ä–∞–±–æ—Ç.")
        return

    if data.get("manual_work"):
        selected_texts.append(data["manual_work"])

    await state.update_data(work_types=selected_texts)
    await state.set_state(ClaimRenewal.new_equipment)
    await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∏–ø—ã —Ä–∞–±–æ—Ç:\n" + "\n".join(f"‚Ä¢ {w}" for w in selected_texts))
    await callback.message.answer("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:", reply_markup=get_cancel_kb())

# === –ü—Ä–æ—á–µ–µ (–≤—Ä—É—á–Ω—É—é) –¥–ª—è —Ä–∞–±–æ—Ç ===
@router.callback_query(F.data == "renewal_other_manual")
async def choose_other_work(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_indices = data.get("selected_works", [])
    selected_texts = [WORK_TYPES_RENEWAL[i] for i in selected_indices]
    await state.set_state(ClaimRenewal.work_other)
    await callback.message.edit_text("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ—á—É—é —Ä–∞–±–æ—Ç—É:")

# === –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã ===
@router.message(ClaimRenewal.work_other)
async def handle_other_work(message: Message, state: FSMContext):
    user_input = message.text.strip()
    if not user_input:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ—á—É—é —Ä–∞–±–æ—Ç—É.")
        return

    data = await state.get_data()
    selected_indices = data.get("selected_works", [])
    selected_texts = [WORK_TYPES_RENEWAL[i] for i in selected_indices]
    final_works = selected_texts + [f"–ü—Ä–æ—á–µ–µ: {user_input}"]

    await state.update_data(work_types=final_works)
    await state.set_state(ClaimRenewal.new_equipment)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:", reply_markup=get_cancel_kb())

# === –®–∞–≥ 5: –ù–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ ‚Üí Quantity ===
@router.message(ClaimRenewal.new_equipment)
async def renewal_quantity(message: Message, state: FSMContext):
    await state.update_data(new_equipment=message.text)
    await state.set_state(ClaimRenewal.quantity)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=get_cancel_kb())

# === –®–∞–≥ 6: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ===
@router.message(ClaimRenewal.quantity)
async def finish_renewal(message: Message, state: FSMContext):
    quantity = message.text.strip()
    if not quantity.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ).")
        return

    data = await state.update_data(quantity=quantity)
    print("–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data)

    try:
        with connect(config.GLPI_URL, config.GLPI_APP_TOKEN, config.GLPI_USER_TOKEN) as glpi:
            content = (
                f"–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–æ—Å–Ω–∞—â–µ–Ω–∏–µ\n"
                f"–ü–æ–µ–∑–¥: {data['train_number']}\n"
                f"–í–∞–≥–æ–Ω: {data['wagon_number']}\n"
                f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞: {data['wagon_sn']}\n"
                f"–°—Ç–∞—Ä–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {data['equipment_in']}\n"
                f"–ù–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {data['new_equipment']}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n"
                f"–¢–∏–ø —Ä–∞–±–æ—Ç: {', '.join(data['work_types'])}"
            )

            ticket_result = glpi.add("Ticket", {
                "name": "API GLPI - –ü–µ—Ä–µ–æ—Å–Ω–∞—â–µ–Ω–∏–µ",
                "content": content,
                "urgency": 3,
                "impact": 3,
                "priority": 3,
                "type": 1,
                "requesttypes_id": 1,
                "itilcategories_id": 3,
                "entities_id": 0
            })

            ticket_id = ticket_result[0]["id"]

            claim_info = (
                "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ GLPI!\n"
                f"üî¢ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {ticket_id}\n"
                f"üìù –¢–µ–º–∞: {data['work_types'][0]}\n"
                f"üìç –ü–æ–µ–∑–¥: {data['train_number']}, –í–∞–≥–æ–Ω: {data['wagon_number']}"
            )
            await message.answer(claim_info, reply_markup=get_main_menu_kb())
            await message.answer("–í—ã —Å–Ω–æ–≤–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")

            await state.clear()

    except Exception as e:
        await state.clear()
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ GLPI.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_kb()
        )
        logging.error(f"[GLPI Error] {e}")