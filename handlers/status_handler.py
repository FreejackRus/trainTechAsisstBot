from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

import config
from glpi_api import connect

router = Router()


# === FSM –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ ===
class StatusCheck(StatesGroup):
    ticket_id = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –æ–∂–∏–¥–∞–µ–º ID –∑–∞—è–≤–∫–∏


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫" ===
@router.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫")
async def request_ticket_id(message: Message, state: FSMContext):
    await state.set_state(StatusCheck.ticket_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")


# === –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∏ –∑–∞–ø—Ä–æ—Å –≤ GLPI ===
@router.message(StatusCheck.ticket_id)
async def get_ticket_status(message: Message, state: FSMContext):
    ticket_id = message.text.strip()

    if not ticket_id.isdigit():
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚Äî ID –∑–∞—è–≤–∫–∏.")
        return

    try:
        with connect(config.GLPI_URL, config.GLPI_APP_TOKEN, config.GLPI_USER_TOKEN) as glpi:
            ticket = glpi.get_item("Ticket", int(ticket_id))

            if ticket is None:
                await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ —Å ID {ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∑–∞—è–≤–∫–∏
            status_id = ticket.get('status', '')
            status_map = {
                '1': '–ù–æ–≤–∞—è',
                '2': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ (–Ω–∞–∑–Ω–∞—á–µ–Ω–æ)',
                '3': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è)',
                '4': '–û–∂–∏–¥–∞–Ω–∏–µ',
                '5': '–ó–∞–∫—Ä—ã—Ç–æ',
                '6': '–û—Ç–º–µ–Ω–µ–Ω–æ',
                '7': '–ü—Ä–æ—á–µ–µ'
            }
            status_name = status_map.get(str(status_id), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            content = ticket.get('content', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
            name = ticket.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            date_creation = ticket.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            response = (
                f"üìÑ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞—è–≤–∫–µ #{ticket_id}</b>\n\n"
                f"üìå –¢–µ–º–∞: {name}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {date_creation}\n"
                f"‚úÖ –°—Ç–∞—Ç—É—Å: {status_name}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {content[:5000]}..."
            )
            await message.answer(response, parse_mode="HTML")

    except Exception as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ GLPI.")
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", e)

    finally:
        await state.clear()