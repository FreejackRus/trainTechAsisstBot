import logging
import re
from datetime import datetime as dt_datetime, timedelta

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

import config
from glpi_api import connect
from keyboards.inline_kb import get_cancel_kb, get_return_main_menu_kb
from states.renewal_states import ClaimRenewal
from utils.helpers import load_train_list, is_wagon_sn_valid
from utils.renewal_utils import show_renewal_summary

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
router = Router()

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
LOCATIONS = {
    "renewalV1_loc_moscow": "–ú–æ—Å–∫–≤–∞",
    "renewalV1_loc_spb": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
    "renewalV1_loc_simferopol": "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å"
}

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
ITEMS_PER_PAGE = 5
CALLBACK_RENEWAL_TRAIN_SELECT = "renewal_train_"
CALLBACK_RENEWAL_PAGE_PREV = "renewal_page_prev"
CALLBACK_RENEWAL_PAGE_NEXT = "renewal_page_next"
CALLBACK_RENEWAL_SEARCH = "renewal_search_train"


# === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–µ–∑–¥–æ–≤ ===
async def show_renewal_train_page(message: Message, state: FSMContext, page: int):
    data = await state.get_data()
    trains = data.get("trains", [])
    if not trains:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤ –ø—É—Å—Ç.")
        return

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_trains = trains[start_idx:end_idx]

    keyboard = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–µ–∑–¥–æ–≤ ‚Äî –∫–∞–∂–¥–∞—è –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    for train_id in page_trains:
        train_text = f"üöÜ –ü–æ–µ–∑–¥ ‚Ññ{train_id}"
        keyboard.button(
            text=train_text,
            callback_data=f"{CALLBACK_RENEWAL_TRAIN_SELECT}{train_id}"
        )

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CALLBACK_RENEWAL_PAGE_PREV))
    if end_idx < len(trains):
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=CALLBACK_RENEWAL_PAGE_NEXT))

    if nav_buttons:
        keyboard.row(*nav_buttons)

    # –ü–æ–∏—Å–∫
    keyboard.row(InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–∞", callback_data=CALLBACK_RENEWAL_SEARCH))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É –≤ —Å—Ç—Ä–æ–∫—É
    keyboard.adjust(1)  # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –Ω–∞ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥:", reply_markup=keyboard.as_markup())
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        elif "message can't be edited" in str(e):
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥:", reply_markup=keyboard.as_markup())
        else:
            raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥:", reply_markup=keyboard.as_markup())

    await state.update_data(page=page)


@router.callback_query(F.data == "claim_type_equipment_v1")
async def handle_equipment(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v1] –ü–æ–ª—É—á–µ–Ω callback: claim_type_equipment_v1 | –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    current_state = await state.get_state()
    if current_state != ClaimRenewal.none:
        await state.clear()
    await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ü–µ—Ä–µ–æ—Å–Ω–∞—â–µ–Ω–∏–µ v1'.")
    await state.set_state(ClaimRenewal.executor_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=get_cancel_kb())
    await callback.answer()


@router.message(ClaimRenewal.executor_name)
async def renewal_executor_name(message: Message, state: FSMContext):
    logger.info(f"[v1] –í–≤–µ–¥–∏—Ç–µ –§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ | –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    if len(message.text.strip()) < 2:
        await message.answer("‚ùå –§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return
    await state.update_data(executor_name=message.text)
    await message.answer(f"‚úÖ –§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {message.text}") # Added line
    data = await state.get_data()
    trains = data.get("trains", [])
    if not trains:
        trains = load_train_list()
        if not trains:
            await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
    await state.update_data(trains=trains, page=0)
    await show_renewal_train_page(message, state, 0)


@router.callback_query(F.data == CALLBACK_RENEWAL_PAGE_PREV)
async def navigate_renewal_pages_prev(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v1] –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥ | Callback: {callback.data} | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    data = await state.get_data()
    page = data.get("page", 0) - 1
    await state.update_data(page=page)
    await show_renewal_train_page(callback.message, state, page)


@router.callback_query(F.data == CALLBACK_RENEWAL_PAGE_NEXT)
async def navigate_renewal_pages_next(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v1] –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–ø–µ—Ä—ë–¥ | Callback: {callback.data} | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    data = await state.get_data()
    page = data.get("page", 0) + 1
    await state.update_data(page=page)
    await show_renewal_train_page(callback.message, state, page)


@router.callback_query(F.data.startswith(CALLBACK_RENEWAL_TRAIN_SELECT))
async def select_renewal_train(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v1] –í—ã–±–æ—Ä –ø–æ–µ–∑–¥–∞ | Callback: {callback.data} | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    renewal_train_number = callback.data.replace(CALLBACK_RENEWAL_TRAIN_SELECT, "", 1)
    await callback.message.answer(f"‚úÖ –ù–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞: {renewal_train_number}") # Added line
    await state.update_data(train_number=renewal_train_number)
    await state.set_state(ClaimRenewal.wagon_sn)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞:", reply_markup=get_cancel_kb())
    await callback.answer()


@router.callback_query(F.data == CALLBACK_RENEWAL_SEARCH)
async def open_renewal_search_train(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v1] –ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–∞ | Callback: {callback.data} | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(ClaimRenewal.train_search)
    await callback.answer()


@router.message(ClaimRenewal.train_search)
async def search_renewal_train(message: Message, state: FSMContext):
    logger.info(f"[v1] –ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–∞ –ø–æ —Ç–µ–∫—Å—Ç—É | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    query = message.text.strip().upper()
    data = await state.get_data()
    all_trains = data.get("trains", []) or load_train_list()
    results = [t for t in all_trains if t.upper().startswith(query)]
    if not results:
        await message.answer("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ–µ–∑–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=train, callback_data=f"{CALLBACK_RENEWAL_TRAIN_SELECT}{train}")]
        for train in results[:10]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:", reply_markup=kb)




@router.message(ClaimRenewal.wagon_sn)
async def renewal_wagon_sn(message: Message, state: FSMContext):
    logger.info(f"[v1] –í–≤–æ–¥ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–∞ | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    sn = message.text.strip()
    if len(sn) < 6:
        await message.answer("‚ùå –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ –±–∞–∑–µ (–≤ —Ñ–∞–π–ª–µ)
    if not await is_wagon_sn_valid(sn):
        await message.answer("‚ùå –í–∞–≥–æ–Ω —Å —Ç–∞–∫–∏–º —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return
    await state.update_data(wagon_sn=sn)
    await message.answer(f"‚úÖ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞: {sn}") # Added line
    await state.set_state(ClaimRenewal.location)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=loc, callback_data=key)] for key, loc in LOCATIONS.items()
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç:", reply_markup=kb)


@router.callback_query(F.data.startswith("renewalV1_loc_"), ClaimRenewal.location)
async def renewal_location(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v1] –í—ã–±–æ—Ä –º–µ—Å—Ç–∞ | Callback: {callback.data} | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    location = LOCATIONS.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ")
    await state.update_data(location=location)
    await callback.message.answer(f"‚úÖ –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç: {location}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –¥–∞—Ç—ã
    await state.set_state(ClaimRenewal.date)
    await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ –≤ –¥–µ–ø–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:")
    await callback.answer()


@router.message(ClaimRenewal.date)
async def process_date_input(message: Message, state: FSMContext):
    date_str = message.text.strip()
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_obj = dt_datetime.strptime(date_str, "%d.%m.%Y").date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        
        today = dt_datetime.now().date()
        tomorrow = today + timedelta(days=1)

        if date_obj < tomorrow:
            await message.answer("‚ùå –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –∏–ª–∏ –±—É–¥—É—é—â–µ–π –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:")
            return ValueError

        await state.update_data(date=formatted_date)
        await message.answer(f"‚úÖ –î–∞—Ç–∞: {formatted_date}") # Added line

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
        await message.answer(f"üìÖ –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {formatted_date}\n‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30):")
        await state.set_state(ClaimRenewal.time)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:")


@router.message(ClaimRenewal.time)
async def renewal_custom_time(message: Message, state: FSMContext):
    logger.info(f"[v1] –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ä—É—á–Ω—É—é | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    time = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (—á—á:–º–º, —á–∞—Å—ã 00-23, –º–∏–Ω—É—Ç—ã 00-59)
    if not re.match(r"^(?:[01]\d|2[0-3]):[0-5]\d$", time):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30 –∏–ª–∏ 14:45)."
        )
        return

    data = await state.get_data()
    full_datetime = f"{data['date']} {time}"
    await state.update_data(datetime=full_datetime)
    await message.answer(f"‚úÖ –í—Ä–µ–º—è: {time}") # Added line
    await state.set_state(ClaimRenewal.comment)

    await message.answer(
        "üí¨ –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]
        ])
    )


@router.callback_query(F.data == "skip_comment", ClaimRenewal.comment)
async def skip_comment(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v1] –ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è | Callback: {callback.data} | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    await state.update_data(comment="-")
    await show_renewal_summary(callback.message, state)
    await callback.answer()


@router.message(ClaimRenewal.comment)
async def renewal_comment(message: Message, state: FSMContext):
    logger.info(f"[v1] –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    await state.update_data(comment=message.text)
    await message.answer(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text}") # Added line
    await show_renewal_summary(message, state)


@router.callback_query(F.data == "create_renewal_claim", ClaimRenewal.confirmation)
async def create_renewal_claim(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v1] –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ | Callback: {callback.data} | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    data = await state.get_data()
    data.setdefault('comment', '')
    try:
        with connect(config.GLPI_URL, config.GLPI_APP_TOKEN, config.GLPI_USER_TOKEN, False) as glpi:
            content = (
                f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ Telegram\n#—Ç–µ–ª–µ–≥—Ä–∞–º\n"
                f"–§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {data['executor_name']}\n"
                f"–ü–æ–µ–∑–¥: {data['train_number']}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–≥–æ–Ω–æ–≤: 1\n"
                f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞: {data['wagon_sn']}\n"
                f"–ú–µ—Å—Ç–æ: {data['location']}\n"
                f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {data['datetime']}\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}"
            )
            ticket_result = glpi.add("Ticket", {
                "name": "API GLPI - –ü–µ—Ä–µ–æ—Å–Ω–∞—â–µ–Ω–∏–µ",
                "content": content,
                "urgency": 4,
                "impact": 4,
                "priority": 4,
                "type": 1,
                "requesttypes_id": 1,
                "itilcategories_id": 38,
                "entities_id": 16,
                "_users_id_observer": [22]
            })
            ticket_id = ticket_result[0]["id"]
            claim_info = (
                "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ GLPI!\n"
                f"üî¢ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {ticket_id}\n"
                f"üìç –ü–æ–µ–∑–¥: {data['train_number']}, "
                f"üìç –í–∞–≥–æ–Ω: {data['wagon_sn']}"
            )
            await callback.message.answer(claim_info, reply_markup=get_return_main_menu_kb())
            await state.clear()
    except Exception as e:
        logger.error(f"[GLPI Error] {e}")
        await callback.message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ GLPI.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_return_main_menu_kb()
        )
        await state.clear()
