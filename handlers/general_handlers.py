from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from keyboards.inline_kb import get_main_menu_kb, get_claim_type_kb, get_cancel_kb

import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()


# === /start ===
@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞")
    await message.answer("ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Peremena!\n\n", reply_markup=get_main_menu_kb())


# === –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É ===
@router.callback_query(F.data == "main_menu_start")
async def create_claim(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∑–∞—è–≤–∫—É.", show_alert=True)
        return

    try:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:", reply_markup=get_claim_type_kb())
        await callback.answer()
    except Exception as e:
        logger.error(f"[create_claim] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


# === –û—Ç–º–µ–Ω–∏—Ç—å (claim_type_cancel) ===
@router.callback_query(F.data == "claim_type_cancel")
async def handle_claim_type_cancel(callback: CallbackQuery):
    try:
        await callback.message.edit_text("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏.", reply_markup=get_main_menu_kb())
        await callback.answer()
    except Exception as e:
        logger.error(f"[handle_claim_type_cancel] –û—à–∏–±–∫–∞: {e}")


# === –û—Ç–º–µ–Ω–∏—Ç—å (cancel_anywhere) ===
@router.callback_query(F.data == "cancel_anywhere")
async def cancel_anywhere(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    logger.info(f"[cancel_anywhere] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

    if current_state:
        await state.clear()
        await callback.message.edit_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏.", reply_markup=get_main_menu_kb())
    else:
        await callback.message.edit_text("–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=get_main_menu_kb())
    await callback.answer()


# === –ü–æ–º–æ—â—å ===
@router.callback_query(F.data == "main_menu_help")
async def cmd_help(callback: CallbackQuery):
    help_text = (
        "üìå *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?*\n\n"
        "1. /start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É' ‚Üí —Ç–∏–ø –∑–∞—è–≤–∫–∏ ‚Üí –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É\n"
        "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ü—Ä–æ—á–µ–µ (–≤—Ä—É—á–Ω—É—é)', –µ—Å–ª–∏ –Ω—É–∂–µ–Ω —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–±–ª–µ–º—ã/—Ä–∞–±–æ—Ç—ã\n"
        "4. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ GLPI\n"
        "5. –° –ø–æ–º–æ—â—å—é '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫' –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."
    )
    try:
        await callback.message.edit_text(help_text, parse_mode="Markdown", reply_markup=get_main_menu_kb())
        await callback.answer()
    except Exception as e:
        logger.error(f"[cmd_help] –û—à–∏–±–∫–∞: {e}")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ status_handler
from handlers.status_handler import request_ticket_id


@router.callback_query(F.data == "main_menu_check_status")
async def check_status(callback: CallbackQuery, state: FSMContext):
    await request_ticket_id(callback.message, state)