import logging
import os
import re
from datetime import datetime as dt_datetime, timedelta

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

import config
import glpi_api
from keyboards.inline_kb import get_cancel_kb, get_return_main_menu_kb
from states.renewal_states import ClaimRenewalV2
from utils.helpers import load_train_list
from utils.renewal_utils import download_file, show_renewal_summary_v2

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
router = Router()

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
LOCATIONS = {
    "renewalV2_loc_moscow": "–ú–æ—Å–∫–≤–∞",
    "renewalV2_loc_spb": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
    "renewalV2_loc_simferopol": "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å"
}
DEFAULT_TIMES = ["09:00", "10:00", "11:00", "12:00"]

ITEMS_PER_PAGE = 5
CALLBACK_RENEWAL_V2_TRAIN_SELECT = "renewalV2_train_"
CALLBACK_RENEWAL_V2_PAGE_PREV = "renewalV2_page_prev"
CALLBACK_RENEWAL_V2_PAGE_NEXT = "renewalV2_page_next"
CALLBACK_RENEWAL_V2_SEARCH = "renewalV2_search_train"


# === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–µ–∑–¥–æ–≤ ===
async def show_renewal_train_page(message: Message, state: FSMContext, page: int):
    data = await state.get_data()
    trains = data.get("trains", [])

    if not trains:
        trains = load_train_list()
        if not trains:
            await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_trains = trains[start_idx:end_idx]

    kb = InlineKeyboardBuilder()
    for train_id in page_trains:
        kb.button(text=f"üöÜ –ü–æ–µ–∑–¥ ‚Ññ{train_id}", callback_data=f"{CALLBACK_RENEWAL_V2_TRAIN_SELECT}{train_id}")

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CALLBACK_RENEWAL_V2_PAGE_PREV))
    if end_idx < len(trains):
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=CALLBACK_RENEWAL_V2_PAGE_NEXT))

    if nav_buttons:
        kb.row(*nav_buttons)

    kb.row(InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–∞", callback_data=CALLBACK_RENEWAL_V2_SEARCH))
    kb.adjust(1)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ

    try:
        await message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥:", reply_markup=kb.as_markup())
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        elif "message can't be edited" in str(e):
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥:", reply_markup=kb.as_markup())
        else:
            raise
    await state.update_data(page=page)


# === –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏ ===
@router.callback_query(F.data == "claim_type_equipment_v2")
async def handle_equipment(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v2] –ü–æ–ª—É—á–µ–Ω callback: claim_type_equipment_v2 | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    current_state = await state.get_state()
    if current_state != ClaimRenewalV2.none:
        await state.clear()

    await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ü–µ—Ä–µ–æ—Å–Ω–∞—â–µ–Ω–∏–µ v2'.")
    await state.set_state(ClaimRenewalV2.executor_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", reply_markup=get_cancel_kb())
    await callback.answer()


# === –í–≤–æ–¥ –§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ===
@router.message(ClaimRenewalV2.executor_name)
async def renewal_executor_name(message: Message, state: FSMContext):
    logger.info(f"[v2] –í–≤–æ–¥ –§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    if len(message.text.strip()) < 2:
        await message.answer("‚ùå –§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return

    await state.update_data(executor_name=message.text)
    data = await state.get_data()
    trains = data.get("trains", [])
    if not trains:
        trains = load_train_list()
        if not trains:
            await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

    await state.update_data(trains=trains, page=0)
    await show_renewal_train_page(message, state, 0)


# === –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–µ–∑–¥–æ–≤ ===
@router.callback_query(F.data == CALLBACK_RENEWAL_V2_PAGE_PREV)
async def navigate_renewal_pages_prev(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v2] –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥ | Callback: {callback.data} | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    data = await state.get_data()
    page = max(data.get("page", 0) - 1, 0)
    await state.update_data(page=page)
    await show_renewal_train_page(callback.message, state, page)


@router.callback_query(F.data == CALLBACK_RENEWAL_V2_PAGE_NEXT)
async def navigate_renewal_pages_next(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v2] –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–ø–µ—Ä—ë–¥ | Callback: {callback.data} | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    data = await state.get_data()
    page = data.get("page", 0) + 1
    await state.update_data(page=page)
    await show_renewal_train_page(callback.message, state, page)


# === –í—ã–±–æ—Ä –ø–æ–µ–∑–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ ===
@router.callback_query(F.data.startswith(CALLBACK_RENEWAL_V2_TRAIN_SELECT))
async def select_renewal_train(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v2] –í—ã–±–æ—Ä –ø–æ–µ–∑–¥–∞ | Callback: {callback.data} | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    train_number = callback.data.replace(CALLBACK_RENEWAL_V2_TRAIN_SELECT, "", 1)
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º: —Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if data.get("editing_field") == "train_number":
        await state.update_data(train_number=train_number)
        await callback.message.answer(f"‚úÖ –ù–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {train_number}")
        await show_renewal_summary_v2(callback.message, state)
        await state.update_data(editing_field=None)
    else:
        await state.update_data(train_number=train_number)
        await callback.message.answer(f"‚úÖ –ù–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞: {train_number}")  # Added line
        await state.set_state(ClaimRenewalV2.wagon_count)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–≥–æ–Ω–æ–≤:", reply_markup=get_cancel_kb())

    await callback.answer()


# === –ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–∞ ===
@router.callback_query(F.data == CALLBACK_RENEWAL_V2_SEARCH)
async def open_renewal_search_train(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v2] –ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–∞ | Callback: {callback.data} | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(ClaimRenewalV2.train_search)
    await callback.answer()


@router.message(ClaimRenewalV2.train_search)
async def search_renewal_train(message: Message, state: FSMContext):
    logger.info(f"[v2] –ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–∞ –ø–æ —Ç–µ–∫—Å—Ç—É | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    query = message.text.strip().upper()
    data = await state.get_data()
    all_trains = data.get("trains", []) or load_train_list()
    results = [t for t in all_trains if t.upper().startswith(query)]

    if not results:
        await message.answer("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ–µ–∑–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üöÜ –ü–æ–µ–∑–¥ ‚Ññ{train}", callback_data=f"{CALLBACK_RENEWAL_V2_TRAIN_SELECT}{train}")]
        for train in results[:10]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:", reply_markup=kb)


# === –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–≥–æ–Ω–æ–≤ ===
@router.message(ClaimRenewalV2.wagon_count)
async def renewal_wagon_count(message: Message, state: FSMContext):
    logger.info(f"[v2] –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–≥–æ–Ω–æ–≤ | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    count = message.text.strip()
    if not count.isdigit() or int(count) <= 0 or int(count)>26:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–≥–æ–Ω–æ–≤.")
        return

    data = await state.get_data()
    if data.get("editing_field") == "wagon_count":
        await state.update_data(wagon_count=count)
        await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–≥–æ–Ω–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {count}")
        await show_renewal_summary_v2(message, state)
        await state.update_data(editing_field=None)
    else:
        await state.update_data(wagon_count=count)
        await state.set_state(ClaimRenewalV2.location)
        await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–≥–æ–Ω–æ–≤ : {count}")
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=loc, callback_data=key)]
                for key, loc in LOCATIONS.items()
            ])
        )




# === –í—ã–±–æ—Ä –º–µ—Å—Ç–∞ ===
@router.callback_query(F.data.startswith("renewalV2_loc_"), ClaimRenewalV2.location)
async def renewal_location(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v2] –í—ã–±–æ—Ä –º–µ—Å—Ç–∞ | Callback: {callback.data} | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    location = LOCATIONS.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ")

    data = await state.get_data()
    if data.get("editing_field") == "location":
        await state.update_data(location=location)
        await callback.message.answer(f"‚úÖ –ú–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {location}")
        await show_renewal_summary_v2(callback.message, state)
        await state.update_data(editing_field=None)
    else:
        await state.update_data(location=location)
        await callback.message.answer(f"‚úÖ –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç: {location}")
        await state.set_state(ClaimRenewalV2.date)
        await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ –≤ –¥–µ–ø–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:")

    await callback.answer()


@router.message(ClaimRenewalV2.date)
async def process_date_input(message: Message, state: FSMContext):
    date_str = message.text.strip()

    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_obj = dt_datetime.strptime(date_str, "%d.%m.%Y").date()
        formatted_date = date_obj.strftime("%d.%m.%Y")
        
        today = dt_datetime.now().date()
        tomorrow = today + timedelta(days=1)

        if date_obj < tomorrow:
            await message.answer("‚ùå –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –∏–ª–∏ –±—É–¥—É—é—â–µ–π –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:")
            return ValueError
        data = await state.get_data()
        new_datetime = f"{formatted_date} {data.get('time', '09:00')}"

        if data.get("editing_field") == "date":
            await state.update_data(date=formatted_date, datetime=new_datetime)
            await message.answer(f"‚úÖ –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {formatted_date}")
            await show_renewal_summary_v2(message, state)
            await state.update_data(editing_field=None)
        else:
            await state.update_data(date=formatted_date, datetime=new_datetime)
            await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):")
            await state.set_state(ClaimRenewalV2.custom_time)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:")



@router.message(ClaimRenewalV2.custom_time)
async def renewal_custom_time(message: Message, state: FSMContext):
    logger.info(f"[v2] –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ä—É—á–Ω—É—é | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    time = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    if not re.match(r"^(?:[01]\d|2[0-3]):(?:[0-5]\d)$", time):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30 –∏–ª–∏ 14:45)."
        )
        return

    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    full_datetime = f"{data['date']} {time}"
    await state.update_data(datetime=full_datetime, time=time)

    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –≤—Ä–µ–º—è
    if data.get("editing_field") == "time":
        await message.answer(f"‚úÖ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {time}")
        await show_renewal_summary_v2(message, state)
        await state.update_data(editing_field=None)
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await state.set_state(ClaimRenewalV2.document)
        file_path = "files/Form.doc"
        if os.path.exists(file_path):
            try:
                document = FSInputFile(path=file_path, filename="–§–æ—Ä–º–∞_–∑–∞—è–≤–∫–∏.doc")
                await message.answer_document(document=document)
            except Exception as e:
                logger.error(f"[v2] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await message.answer(
                "‚ö†Ô∏è –§–æ—Ä–º–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç."
            )

        instruction_message = (
            "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (—Ñ–æ—Ç–æ/—Ñ–∞–π–ª), –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ. "
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
        )
        reply_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_document")]
        ])
        await message.answer(
            text=instruction_message,
            reply_markup=reply_markup
        )


# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ===
@router.message(ClaimRenewalV2.document, F.document)
async def renewal_get_document(message: Message, state: FSMContext):
    logger.info(f"[v2] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—Å–ª–∞–Ω –∏–º–µ–Ω–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç
    file_id = message.document.file_id
    file_name = message.document.file_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not file_name.lower().endswith(('.doc')):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ .doc –∏–ª–∏ .doc.")
        return

    data = await state.get_data()
    if data.get("editing_field") == "document":
        await state.update_data(document={"file_id": file_id, "file_name": file_name})
        await message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω—ë–Ω.")
        await show_renewal_summary_v2(message, state)
        await state.update_data(editing_field=None)
    else:
        await state.update_data(document={"file_id": file_id, "file_name": file_name})
        await message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω.")
        await show_renewal_summary_v2(message, state)


# === –ü—Ä–æ–ø—É—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ===
@router.callback_query(F.data == "skip_document", ClaimRenewalV2.document)
async def skip_document(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v2] –ü—Ä–æ–ø—É—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ | Callback: {callback.data} | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    data = await state.get_data()
    if data.get("editing_field") == "document":
        await state.update_data(document=None)
        await callback.message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω.")
    else:
        await state.update_data(document=None)
        await callback.message.answer("üìé –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω.")

    await show_renewal_summary_v2(callback.message, state)
    await callback.answer()


# === –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ ===
@router.callback_query(F.data == "create_renewalV2_claim", ClaimRenewalV2.confirmation)
async def create_renewal_claim_v2(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[v2] –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ | Callback: {callback.data} | –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")

    try:
        data = await state.get_data()
        logger.debug("[v2] –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: %s", data)

        with glpi_api.connect(config.GLPI_URL, config.GLPI_APP_TOKEN, config.GLPI_USER_TOKEN, False) as glpi:
            logger.debug("[v2] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GLPI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            content = (
                f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ Telegram\n#—Ç–µ–ª–µ–≥—Ä–∞–º\n"
                f"–§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {data['executor_name']}\n"
                f"–ü–æ–µ–∑–¥: {data['train_number']}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–≥–æ–Ω–æ–≤: {data['wagon_count']}\n"
                f"–ú–µ—Å—Ç–æ: {data['location']}\n"
                f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {data['datetime']}\n"
            )
            logger.debug("[v2] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞—è–≤–∫–∏:\n%s", content)

            ticket_data = {
                "name": "API GLPI - –ü–µ—Ä–µ–æ—Å–Ω–∞—â–µ–Ω–∏–µ v2",
                "content": content,
                "urgency": 4,
                "impact": 4,
                "priority": 4,
                "type": 1,
                "requesttypes_id": 1,
                "itilcategories_id": 39,
                "entities_id": 16,
                "_users_id_observer": [22],
            }
            logger.debug("[v2] –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: %s", ticket_data)

            logger.debug("[v2] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")
            ticket_result = glpi.add("Ticket", ticket_data)
            logger.debug("[v2] –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: %s", ticket_result)

            ticket_id = ticket_result[0]["id"]
            claim_info = (
                "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ GLPI!\n"
                f"üî¢ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {ticket_id}\n"
                f"üìç –ü–æ–µ–∑–¥: {data['train_number']},"
                f" –í–∞–≥–æ–Ω–æ–≤: {data['wagon_count']}"
            )

            if data.get("document"):
                doc = data["document"]
                file_path = await download_file(callback.bot, doc["file_id"])

                try:
                    upload_result = glpi.upload_document(doc["file_id"], file_path)
                    logger.debug(f"[v2] –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {upload_result}")

                    document_id = upload_result['id']

                    glpi.add("Document_Item", {
                        "documents_id": document_id,
                        "items_id": ticket_id,
                        "itemtype": "Ticket"
                    })

                    logger.debug(f"[v2] –î–æ–∫—É–º–µ–Ω—Ç #{document_id} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞—è–≤–∫–µ #{ticket_id}")
                except Exception as e:
                    logger.error(f"[v2] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ –ø—Ä–∏–≤—è–∑–∫–µ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
                finally:
                    os.remove(file_path)
            await callback.message.answer(claim_info, reply_markup=get_return_main_menu_kb())
            await state.clear()
            logger.info("[v2] –ó–∞—è–≤–∫–∞ #%d —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", ticket_id)

    except Exception as e:
        logger.error(f"[GLPI Error] {e}", exc_info=True)
        await callback.message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ GLPI.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_return_main_menu_kb()
        )
        await state.clear()
