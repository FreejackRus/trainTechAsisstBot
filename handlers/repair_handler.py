import logging
import re
from datetime import datetime as dt_datetime
from typing import Union

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery

import config
from glpi_api import connect
from keyboards.inline_kb import get_checkbox_kb_with_other, get_cancel_kb, get_return_main_menu_kb
from states.repair_states import ClaimRepair
from utils.helpers import load_train_list, is_wagon_sn_valid

router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ITEMS_PER_PAGE = 5
PROBLEMS_REPAIR = [
    "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Ä—Ç–∞–ª",
    "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ wi-fi —Å–µ—Ç—å ¬´–¢–∞–≤—Ä–∏—è.–ú–µ–¥–∏–∞¬ª",
]
DEFAULT_TIMES = ["09:00", "10:00", "11:00", "12:00"]


async def show_repair_summary(message: Union[Message, CallbackQuery], state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    if isinstance(message, CallbackQuery):
        message = message.message

    data = await state.get_data()
    problem_types = data.get("problem_types", [])

    if not problem_types and "selected_problems" in data:
        problem_types = [PROBLEMS_REPAIR[i] for i in data["selected_problems"] if i < len(PROBLEMS_REPAIR)]

    if data.get("manual_problem"):
        problem_types.append(data["manual_problem"])

    summary = (
        "üìÑ *–ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ*\n"
        f"–¢–∏–ø –∑–∞—è–≤–∫–∏: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã\n"
        f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {data.get('executor_name', '-')}\n"
        f"–ü–æ–µ–∑–¥ ‚Ññ: {data.get('train_number', '-')}\n"
        f"–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞: {data.get('wagon_number', '-')}\n"
        f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞: {data.get('wagon_sn', '-')}\n"
        f"–ü—Ä–æ–±–ª–µ–º—ã: {', '.join(problem_types) if problem_types else '-'}\n"
    )

    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_repair_claim")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_start")]
    ])

    await state.set_state(ClaimRepair.confirmation)
    await message.answer(summary, reply_markup=confirm_kb, parse_mode="Markdown")


async def show_train_page(callback: CallbackQuery, state: FSMContext, page: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–µ–∑–¥–æ–≤"""
    data = await state.get_data()
    trains = data.get("trains", [])
    start_index = page * ITEMS_PER_PAGE
    end_index = min(start_index + ITEMS_PER_PAGE, len(trains))
    current_page_trains = trains[start_index:end_index]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–µ–∑–¥–æ–≤
    keyboard_buttons = [
        [InlineKeyboardButton(text=f"üöÜ –ü–æ–µ–∑–¥ ‚Ññ{train}", callback_data=f"train_{train}")]
        for train in current_page_trains
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_prev_{page - 1}"))
    if end_index < len(trains):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"page_next_{page + 1}"))

    keyboard_buttons.append([InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–∞", callback_data="search_train")])
    if nav_buttons:
        keyboard_buttons.append(nav_buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.edit_reply_markup(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )


async def process_common_field(message: Message, state: FSMContext,
                               field_name: str, next_state,
                               validation_func=None, error_msg=None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã"""
    value = message.text.strip()

    if validation_func and not validation_func(value):
        await message.answer(error_msg)
        return False

    await state.update_data({field_name: value})
    logger.info(
        f"State data after update for {field_name}: {await state.get_data()}")  # Updated logging to get current data

    # Display the confirmation message for the current field

    if field_name == "wagon_number":
        await message.answer(f"‚úÖ –ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞: {value}")
    elif field_name == "wagon_sn":
        await message.answer(f"‚úÖ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞: {value}")
    elif field_name == "selected_problems":
        await message.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {value}")
    elif field_name == "manual_problem":
        await message.answer(f"‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ (–≤—Ä—É—á–Ω—É—é): {value}")


    data = await state.get_data()

    if data.get('editing'):
        await state.update_data(editing=False)
        await show_repair_summary(message, state)
    else:
        await state.set_state(next_state)
        return True

    return False


@router.callback_query(F.data == "claim_type_restoration")
async def handle_restoration(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏ '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ'"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∏–ø–µ –∑–∞—è–≤–∫–∏
    await callback.message.answer("üîß –í—ã –≤—ã–±—Ä–∞–ª–∏: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")

    trains = load_train_list()

    if not trains:
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.update_data(trains=trains, page=0)
    # –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–µ–∑–¥–∞–º–∏ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await show_train_page(callback, state, 0)

    await callback.answer()


@router.callback_query(F.data.startswith("page_prev_") | F.data.startswith("page_next_"))
async def navigate_pages(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–ø–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–≤"""
    data = await state.get_data()
    page = int(callback.data.split("_")[-1])
    total_pages = (len(data.get("trains", [])) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

    if 0 <= page < total_pages:
        await state.update_data(page=page)
        await show_train_page(callback, state, page)


@router.callback_query(F.data == "search_train")
async def open_search_train(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–µ–∑–¥–∞"""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(ClaimRepair.train_number)
    await callback.answer()


@router.callback_query(F.data.startswith("train_"))
async def select_train(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ–µ–∑–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    train_number = callback.data.split("_", 1)[1]
    await state.update_data(train_number=train_number)
    await callback.message.answer(f"‚úÖ –ù–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞: {train_number}") # Added line
    data = await state.get_data()

    if data.get('editing'):
        await show_repair_summary(callback, state)
    else:

        await state.set_state(ClaimRepair.wagon_number)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞:", reply_markup=get_cancel_kb())

    await callback.answer()


@router.message(ClaimRepair.train_number)
async def search_train(message: Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–∞ –ø–æ —á–∞—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞"""
    query = message.text.strip().upper()
    trains = load_train_list()
    results = [t for t in trains if t.upper().startswith(query)]

    if not results:
        await message.answer("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ–µ–∑–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=train, callback_data=f"train_{train}")]
            for train in results[:10]
        ])
    )


@router.message(ClaimRepair.wagon_number)
async def repair_wagon_sn(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–∞"""
    if not await process_common_field(
            message, state,
            "wagon_number", ClaimRepair.wagon_sn,
            lambda x: x.isdigit(), "‚ùå –ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."
    ):
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞:", reply_markup=get_cancel_kb())


@router.message(ClaimRepair.wagon_sn)
async def repair_wagon_sn(message: Message, state: FSMContext):
    wagon_sn = message.text.strip()

    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–∞"""
    if not await process_common_field(
            message, state,
            "wagon_sn", ClaimRepair.problem_types, # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ClaimRepair.problem_types
            lambda x: len(x) >= 6, "‚ùå –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤."
    ):
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ –±–∞–∑–µ (–≤ —Ñ–∞–π–ª–µ)
    if not await is_wagon_sn_valid(wagon_sn):
        await message.answer("‚ùå –í–∞–≥–æ–Ω —Å —Ç–∞–∫–∏–º —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return

    # –£–¥–∞–ª–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–≤–æ–¥ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    data = await state.get_data()
    selected = data.get("selected_problems", [])

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º:",
        reply_markup=get_checkbox_kb_with_other(PROBLEMS_REPAIR, selected, prefix="repair")
    )


# –£–¥–∞–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è @router.message(ClaimRepair.equipment_in) async def repair_problem_type(...)


@router.callback_query(F.data == "repair_other_manual")
async def handle_repair_other_manual(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º—ã"""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤—Ä—É—á–Ω—É—é:")
    await state.set_state(ClaimRepair.problem_other)
    await callback.answer()


@router.message(ClaimRepair.problem_other)
async def repair_manual_problem(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    if not await process_common_field(
            message, state,
            "manual_problem", None,
            None, None
    ):
        return

    data = await state.get_data()
    selected = data.get("selected_problems", [])
    if len(PROBLEMS_REPAIR) > 0:
        selected.append(len(PROBLEMS_REPAIR) - 1)

    await state.update_data(selected_problems=selected)
    await state.set_state(ClaimRepair.executor_name)


@router.callback_query(F.data.regexp(r"^repair_check_\d+$"))
async def handle_repair_check(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–±–ª–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞"""
    index = int(callback.data.split("_")[2])
    data = await state.get_data()
    selected = data.get("selected_problems", [])

    if index in selected:
        selected.remove(index)
    else:
        selected.append(index)


    await state.update_data(selected_problems=selected)
    
    await callback.message.edit_reply_markup(
        reply_markup=get_checkbox_kb_with_other(PROBLEMS_REPAIR, selected, prefix="repair")
    )


@router.callback_query(F.data == "repair_done")
async def finish_repair_problems(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–±–ª–µ–º"""
    data = await state.get_data()
    selected_indices = data.get("selected_problems", [])
    selected_texts = [PROBLEMS_REPAIR[i] for i in selected_indices if i < len(PROBLEMS_REPAIR)]

    if data.get("manual_problem"):
        selected_texts.append(data["manual_problem"])

    await state.update_data(problem_types=selected_texts)

    if data.get('editing'):
        await state.update_data(editing=False)
        await show_repair_summary(callback, state)
    else:
        await callback.message.answer(f"‚úÖ –ü—Ä–æ–±–ª–µ–º—ã: {selected_texts}")
        await state.set_state(ClaimRepair.executor_name)
        await callback.message.answer("–§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:")

    await callback.answer()


@router.message(ClaimRepair.executor_name)
async def repair_executor_position(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    await state.update_data(executor_name=message.text)
    await show_repair_summary(message, state)


@router.callback_query(F.data == "create_repair_claim", ClaimRepair.confirmation)
async def finish_repair(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ GLPI"""
    data = await state.get_data()
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ GLPI", extra={"data": data})

    try:
        with connect(config.GLPI_URL, config.GLPI_APP_TOKEN, config.GLPI_USER_TOKEN, False) as glpi:
            logger.debug("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ GLPI API")

            content = (
                f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ Telegram\n"
                "#—Ç–µ–ª–µ–≥—Ä–∞–º\n"
                f"–ü–æ–µ–∑–¥: {data['train_number']}\n"
                f"–í–∞–≥–æ–Ω: {data['wagon_number']}\n"
                f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞: {data['wagon_sn']}\n"
                f"–ü—Ä–æ–±–ª–µ–º—ã: {', '.join(data['problem_types'])}\n"
                f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {data['executor_name']}"
            )

            ticket_data = {
                "name": "API GLPI - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã",
                "content": content,
                "urgency": 4,
                "impact": 4,
                "priority": 4,
                "type": 1,
                "requesttypes_id": 1,
                "itilcategories_id": 39,
                "entities_id": 16,
                "_users_id_observer": [22]
            }

            logger.debug("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ GLPI", extra={"ticket_data": ticket_data})
            ticket_result = glpi.add("Ticket", ticket_data)

            ticket_id = ticket_result[0]['id']
            logger.info(f"–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ GLPI", extra={"ticket_id": ticket_id})

            await callback.message.answer(
                f"‚úÖ –ó–∞—è–≤–∫–∞ ‚Ññ{ticket_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ GLPI!\n\n"
                f"–ü–æ–µ–∑–¥: {data['train_number']}\n"
                f"–í–∞–≥–æ–Ω: {data['wagon_number']}\n"
                f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞: {data['wagon_sn']}",
                reply_markup=get_return_main_menu_kb()
            )
            await state.clear()

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –≤ GLPI", exc_info=True)
        await callback.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await state.clear()

    await callback.answer()
