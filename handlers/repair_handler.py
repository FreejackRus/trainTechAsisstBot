import logging
from datetime import date as dt_date

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.types import Message, CallbackQuery
from aiogram_calendar import SimpleCalendarCallback

import config
from glpi_api import connect
from keyboards.inline_kb import get_checkbox_kb_with_other
from keyboards.reply_kb import get_cancel_kb, get_main_menu_kb
from states.repair_states import ClaimRepair
from utils.ru_calendar import RuSimpleCalendar

router = Router()

# === –ü—Ä–æ–±–ª–µ–º—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ===
PROBLEMS_REPAIR = [
    "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ú–µ–¥–∏–∞—Å–µ—Ä–≤–µ—Ä",
    "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç Wi-Fi",
    "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ò–Ω—Ç–µ—Ä–Ω–µ—Ç",
    "–ù–µ—Ç –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Ç–æ—á–∫–µ –¥–æ—Å—Ç—É–ø–∞",
    "–ù–µ—Ç –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä–∞"
]

# === –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ ===
@router.message(F.text == "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")
async def start_repair(message: Message, state: FSMContext):
    await state.set_state(ClaimRepair.train_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞:", reply_markup=get_cancel_kb())

# === –®–∞–≥ 1: –ù–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞ ‚Üí Wagon number ===
@router.message(ClaimRepair.train_number)
async def repair_wagon_number(message: Message, state: FSMContext):
    if message.text.strip().isdigit():
        await state.update_data(train_number=message.text)
        await state.set_state(ClaimRepair.wagon_number)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞:", reply_markup=get_cancel_kb())
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞ (—á–∏—Å–ª–æ):")

# === –®–∞–≥ 2: –ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞ ‚Üí Wagon SN ===
@router.message(ClaimRepair.wagon_number)
async def repair_wagon_sn(message: Message, state: FSMContext):
    if message.text.strip().isdigit():
        await state.update_data(wagon_number=message.text)
        await state.set_state(ClaimRepair.wagon_sn)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞:", reply_markup=get_cancel_kb())
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞ (—á–∏—Å–ª–æ):")

# === –®–∞–≥ 3: –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞ ‚Üí Equipment IN ===
@router.message(ClaimRepair.wagon_sn)
async def repair_equipment_in(message: Message, state: FSMContext):
    await state.update_data(wagon_sn=message.text)
    await state.set_state(ClaimRepair.equipment_in)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:", reply_markup=get_cancel_kb())

# === –®–∞–≥ 4: –í—ã–±–æ—Ä –ø—Ä–æ–±–ª–µ–º—ã ===
# === –í—ã–±–æ—Ä –ø—Ä–æ–±–ª–µ–º—ã ===
@router.message(ClaimRepair.equipment_in)
async def repair_problem_type(message: Message, state: FSMContext):
    await state.update_data(equipment_in=message.text)
    await state.set_state(ClaimRepair.problem_types)
    data = await state.get_data()
    selected = data.get("selected_problems", [])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º:",
                         reply_markup=get_checkbox_kb_with_other(PROBLEMS_REPAIR, selected, prefix="repair"))

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤ ===
import re
@router.callback_query(F.data.regexp(r"^repair_check_\d+$"))
async def handle_repair_check(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.split("_")[2])  # –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ
    data = await state.get_data()
    selected = data.get("selected_problems", [])

    if index in selected:
        selected.remove(index)
    else:
        selected.append(index)

    await state.update_data(selected_problems=selected)
    await callback.message.edit_reply_markup(
        reply_markup=get_checkbox_kb_with_other(PROBLEMS_REPAIR, selected, prefix="repair")
    )

# === –ì–æ—Ç–æ–≤–æ ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã ===
@router.callback_query(F.data == "repair_done")
async def finish_repair_problems(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_indices = data.get("selected_problems", [])
    selected_texts = [PROBLEMS_REPAIR[i] for i in selected_indices]
    if not selected_texts and not data.get("manual_problem"):
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø—Ä–æ–±–ª–µ–º—É.")
        return
    if data.get("manual_problem"):
        selected_texts.append(data["manual_problem"])
    await state.update_data(problem_types=selected_texts)
    await state.set_state(ClaimRepair.location)
    await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:\n" + "\n".join(f"‚Ä¢ {p}" for p in selected_texts))
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç:", reply_markup=get_cancel_kb())

# === –ü—Ä–æ—á–µ–µ (–≤—Ä—É—á–Ω—É—é) ===
@router.callback_query(F.data == "repair_other_manual")
async def repair_other_problem(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_indices = data.get("selected_problems", [])
    selected_texts = [PROBLEMS_REPAIR[i] for i in selected_indices]
    await state.set_state(ClaimRepair.problem_other)
    await callback.message.edit_text("–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É:")

# === –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è ===
@router.message(ClaimRepair.problem_other)
async def handle_other_problem(message: Message, state: FSMContext):
    user_input = message.text.strip()
    if not user_input:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.")
        return
    data = await state.get_data()
    selected_indices = data.get("selected_problems", [])
    selected_texts = [PROBLEMS_REPAIR[i] for i in selected_indices]
    final_problems = selected_texts + [f"–ü—Ä–æ—á–µ–µ: {user_input}"]
    await state.update_data(problem_types=final_problems)
    await state.set_state(ClaimRepair.location)
    await message.answer(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:\n" + "\n".join(f"‚Ä¢ {p}" for p in final_problems)
    )
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç:", reply_markup=get_cancel_kb())

# === –®–∞–≥ 5: –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç ‚Üí Date ===
@router.message(ClaimRepair.location)
async def repair_choose_date(message: Message, state: FSMContext):
    await state.update_data(location=message.text)
    await state.set_state(ClaimRepair.date)

    today = dt_date.today()
    calendar = RuSimpleCalendar()
    markup = await calendar.start_calendar(today.year, today.month)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=markup)


# === –®–∞–≥ 6: –í—ã–±–æ—Ä –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å ===
@router.callback_query(SimpleCalendarCallback.filter(), ClaimRepair.date)
async def process_ru_calendar(
    callback: CallbackQuery,
    callback_data: dict,
    state: FSMContext
):
    calendar = RuSimpleCalendar()
    selected, date = await calendar.process_selection(callback, callback_data)

    if selected:
        # –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞
        formatted_date = date.strftime("%d.%m.%Y")
        await state.update_data(date=formatted_date)
        await state.set_state(ClaimRepair.time)

        time_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="09:00", callback_data="time_09:00")],
            [InlineKeyboardButton(text="10:00", callback_data="time_10:00")],
            [InlineKeyboardButton(text="11:00", callback_data="time_11:00")],
            [InlineKeyboardButton(text="12:00", callback_data="time_12:00")],
            [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data="time_custom")]
        ])

        await callback.message.edit_text(
            f"üìÖ –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {formatted_date}\n"
            "‚è∞ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:"
        )
        await callback.message.edit_reply_markup(reply_markup=time_kb)
    else:
        # –ö–∞–ª–µ–Ω–¥–∞—Ä—å –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω (–º–µ—Å—è—Ü/–≥–æ–¥), –Ω–æ –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
        pass
# === –®–∞–≥ 7: –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ ===
@router.callback_query(F.data.startswith("time_"), ClaimRepair.time)
async def select_time(callback: CallbackQuery, state: FSMContext):
    time = callback.data.split("_")[1]
    if time == "custom":
        await callback.message.edit_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:30):")
    else:
        data = await state.get_data()
        full_datetime = f"{data['date']} {time}"
        await state.update_data(datetime=full_datetime)
        await state.set_state(ClaimRepair.executor_name)
        await callback.message.edit_text(f"üìÖ –ò—Ç–æ–≥–æ–≤–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {full_datetime}")
        await callback.message.answer("–§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:")

# === –í—Ä–µ–º—è –≤—Ä—É—á–Ω—É—é ===
@router.message(ClaimRepair.time)
async def enter_custom_time(message: Message, state: FSMContext):
    time = message.text.strip()
    if re.match(r"^([01]\d|2[0-3]):[0-5]\d$", time):
        data = await state.get_data()
        full_datetime = f"{data['date']} {time}"
        await state.update_data(datetime=full_datetime)
        await state.set_state(ClaimRepair.executor_name)
        await message.answer("–§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫ 10:30")

# === –§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ===
@router.message(ClaimRepair.executor_name)
async def repair_executor_position(message: Message, state: FSMContext):
    await state.update_data(executor_name=message.text)
    await state.set_state(ClaimRepair.executor_position)
    await message.answer("–î–æ–ª–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", reply_markup=get_cancel_kb())

# === –î–æ–ª–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ===
@router.message(ClaimRepair.executor_position)
async def finish_repair(message: Message, state: FSMContext):
    data = await state.update_data(executor_position=message.text)
    print(data)

    # === –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ GLPI ===
    try:
        with connect(config.GLPI_URL, config.GLPI_APP_TOKEN, config.GLPI_USER_TOKEN) as glpi:
            # –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞—è–≤–∫–∏
            content = (
                f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ Telegram\n"
                f"–ü–æ–µ–∑–¥: {data['train_number']}\n"
                f"–í–∞–≥–æ–Ω: {data['wagon_number']}\n"
                f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞: {data['wagon_sn']}\n"
                f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {data['equipment_in']}\n"
                f"–ü—Ä–æ–±–ª–µ–º—ã: {', '.join(data['problem_types'])}\n"
                f"–ú–µ—Å—Ç–æ: {data['location']}\n"
                f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {data['datetime']}\n"
                f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {data['executor_name']} ({data['executor_position']})"
            )

            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ GLPI
            ticket_result = glpi.add("Ticket", {
                "name": "API GLPI",
                "content": content,
                "urgency": 3,
                "impact": 3,
                "priority": 3,
                "type": 1,  # –ò–Ω—Ü–∏–¥–µ–Ω—Ç
                "requesttypes_id": 1,  # –¢–µ–ª–µ—Ñ–æ–Ω / Telegram
                "itilcategories_id": 1,  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞")
                "entities_id": 0,  # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
            })

            # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏
            ticket_id = ticket_result[0]['id']

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ
            claim_info = (
                "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ GLPI!\n"
                f"üî¢ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {ticket_id}\n"
                f"üìù –¢–µ–º–∞: {data['problem_types'][0]}\n"
                f"üìç –ü–æ–µ–∑–¥: {data['train_number']}, –í–∞–≥–æ–Ω: {data['wagon_number']}"
            )
            await message.answer(claim_info, reply_markup=get_main_menu_kb())
            await message.answer("–í—ã —Å–Ω–æ–≤–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()

    except Exception as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ GLPI.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –≤ GLPI: {e}")